public interface CacheStrategy<K, V> {
    void put(K key, V value, long ttlMillis);
    V get(K key);
    void remove(K key);
}

public class TTLCacheStrategy<K, V> implements CacheStrategy<K, V> {

    private class CacheEntry {
        V value;
        long expiryTime;

        CacheEntry(V value, long ttlMillis) {
            this.value = value;
            this.expiryTime = System.currentTimeMillis() + ttlMillis;
        }

        boolean isExpired() {
            return System.currentTimeMillis() > expiryTime;
        }
    }

    private final Map<K, CacheEntry> cache = new ConcurrentHashMap<>();

    @Override
    public void put(K key, V value, long ttlMillis) {
        cache.put(key, new CacheEntry(value, ttlMillis));
    }

    @Override
    public V get(K key) {
        CacheEntry entry = cache.get(key);
        if (entry == null || entry.isExpired()) {
            cache.remove(key);
            return null;
        }
        return entry.value;
    }

    @Override
    public void remove(K key) {
        cache.remove(key);
    }
}


public class CacheContext<K, V> {

    private static CacheContext<?, ?> instance;
    private final CacheStrategy<K, V> cacheStrategy;

    private CacheContext(CacheStrategy<K, V> strategy) {
        this.cacheStrategy = strategy;
    }

    @SuppressWarnings("unchecked")
    public static synchronized <K, V> CacheContext<K, V> getInstance(CacheStrategy<K, V> strategy) {
        if (instance == null) {
            instance = new CacheContext<>(strategy);
        }
        return (CacheContext<K, V>) instance;
    }

    public void put(K key, V value, long ttlMillis) {
        cacheStrategy.put(key, value, ttlMillis);
    }

    public V get(K key) {
        return cacheStrategy.get(key);
    }

    public void remove(K key) {
        cacheStrategy.remove(key);
    }
}

public class Main {
    public static void main(String[] args) throws InterruptedException {
        CacheStrategy<String, String> strategy = new TTLCacheStrategy<>();
        CacheContext<String, String> cache = CacheContext.getInstance(strategy);

        cache.put("session", "user123", 2000); // 2 seconds TTL
        System.out.println("Stored: " + cache.get("session")); // user123

        Thread.sleep(3000);
        System.out.println("After expiration: " + cache.get("session")); // null
    }
}





